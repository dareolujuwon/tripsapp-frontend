{"version":3,"sources":["Dashboard.js","serviceWorker.js","index.js"],"names":["headerSortingStyle","backgroundColor","centertitle","column","colIndex","columns","dataField","text","headerAlign","filter","textFilter","sort","formatter","cell","dateObj","Date","concat","getDate","slice","getMonth","getFullYear","editor","editable","defaultSorted","order","customTotal","from","to","size","react_default","a","createElement","className","CaptionElement","style","textAlign","color","borderWidth","borderStyle","padding","Dashboard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleOnSelect","row","isSelect","setState","selected","toConsumableArray","state","primaryid","selectedjson","x","handleOnSelectAll","rows","ids","map","r","delete","e","preventDefault","axiosConfigObject","headers","Content-Type","c","length","axios","data","then","resp","status","products","isLoaded","alert","get","response","FileDownload","_this2","selectRow","mode","clickToSelect","onSelect","onSelectAll","options","paginationSize","pageStartIndex","withFirstAndLast","firstPageText","prePageText","nextPageText","lastPageText","nextPageTitle","prePageTitle","firstPageTitle","lastPageTitle","showTotal","paginationTotalRenderer","sizePerPageList","value","onClick","disabled","lib_default","bootstrap4","keyField","caption","Dashboard_CaptionElement","cellEdit","cellEditFactory","blurToSave","filterFactory","pagination","paginationFactory","striped","hover","condensed","noDataIndication","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_Dashboard_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cd7a25ab.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport \"./Dashboard.css\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\nimport filterFactory, { textFilter } from \"react-bootstrap-table2-filter\";\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\nimport axios from \"axios\";\nimport FileDownload from \"js-file-download\";\n\nconst headerSortingStyle = { backgroundColor: \"#c8e6c9\" };\nconst centertitle = (column, colIndex) => \"center\";\n\nconst columns = [\n  {\n    dataField: \"id\",\n    text: \"ID\",\n    headerAlign: centertitle\n  },\n  {\n    dataField: \"description\",\n    text: \"Product Name\",\n    filter: textFilter(),\n    sort: true,\n    headerSortingStyle,\n    headerAlign: centertitle\n  },\n  {\n    dataField: \"datetime\",\n    text: \"Date\",\n    sort: true,\n    headerSortingStyle,\n    headerAlign: centertitle,\n    formatter: cell => {\n      let dateObj = cell;\n      if (typeof cell !== \"object\") {\n        dateObj = new Date(cell);\n      }\n      return `${(\"0\" + dateObj.getDate()).slice(-2)}/${(\n        \"0\" +\n        (dateObj.getMonth() + 1)\n      ).slice(-2)}/${dateObj.getFullYear()}`;\n    },\n    editor: {\n      //   type: Type.DATE\n    }\n  },\n  {\n    dataField: \"longitude\",\n    text: \"Longitude\",\n    editable: true,\n    headerAlign: centertitle\n  },\n  {\n    dataField: \"latitude\",\n    text: \"Latitude\",\n    editable: true,\n    headerAlign: centertitle\n  },\n  {\n    dataField: \"elevation\",\n    text: \"Elevation\",\n    editable: true,\n    headerAlign: centertitle\n  }\n];\n\nconst defaultSorted = [\n  {\n    dataField: \"datetime\",\n    order: \"desc\"\n  }\n];\n\nconst customTotal = (from, to, size) => (\n  <span className=\"react-bootstrap-table-pagination-total\">\n    Showing {from} to {to} of {size} Results\n  </span>\n);\n\nconst CaptionElement = () => (\n  <h3\n    style={{\n      textAlign: \"center\",\n      color: \"purple\",\n      borderWidth: \"3px 0px 3px 0px\",\n      borderStyle: \"solid\",\n      padding: \"0.5em\"\n    }}\n  >\n    Trip Logger\n  </h3>\n);\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      products: [],\n      isLoaded: false,\n      selected: [],\n      selectedjson: []\n    };\n  }\n\n  handleOnSelect = (row, isSelect) => {\n    if (isSelect) {\n      this.setState(() => ({\n        selected: [...this.state.selected, row.primaryid],\n        selectedjson: [...this.state.selectedjson, row]\n      }));\n    } else {\n      this.setState(() => ({\n        selected: this.state.selected.filter(x => x !== row.primaryid)\n      }));\n    }\n  };\n\n  handleOnSelectAll = (isSelect, rows) => {\n    const ids = rows.map(r => r.primaryid);\n    if (isSelect) {\n      this.setState(() => ({\n        selected: ids\n      }));\n    } else {\n      this.setState(() => ({\n        selected: []\n      }));\n    }\n  };\n\n  delete = e => {\n    e.preventDefault();\n    const deleteUrl = \"http://localhost:5000/api/v1/resources/records\";\n    const httpReqHeaders = {\n      \"Content-Type\": \"application/json\"\n    };\n    const axiosConfigObject = {\n      headers: httpReqHeaders\n    };\n    for (var c = 0; c < this.state.selectedjson.length; c++) {\n      axios\n        .delete(\n          deleteUrl,\n          { data: this.state.selectedjson[c] },\n          axiosConfigObject\n        )\n        .then(resp => {\n          if (resp.status === 200) {\n            this.setState({\n              products: resp.data,\n              isLoaded: true\n            });\n            alert(\"Successfully deleted\");\n          } else {\n            alert(\"An error occured\");\n          }\n        });\n    }\n  };\n\n  download() {\n    axios\n      .get(\"http://localhost:5000/api/v1/resources/records/docxfile\")\n      .then(response => {\n        FileDownload(response.data, \"file.txt.docx\");\n      });\n  }\n\n  componentDidMount() {\n    axios\n      .get(\"http://localhost:5000/api/v1/resources/records\")\n      .then(response => {\n        this.setState({\n          products: response.data,\n          isLoaded: true\n        });\n      });\n  }\n  render() {\n    if (!this.state.isLoaded) {\n      return (\n        <div>\n          <h3\n            style={{\n              textAlign: \"center\",\n              color: \"green\",\n              padding: \"0.5em\"\n            }}\n          >\n            Loading...\n          </h3>\n        </div>\n      );\n    } else {\n      const selectRow = {\n        mode: \"checkbox\",\n        clickToSelect: true,\n        style: { backgroundColor: \"gold\" },\n        selected: this.state.selected,\n        onSelect: this.handleOnSelect,\n        onSelectAll: this.handleOnSelectAll\n      };\n      const options = {\n        paginationSize: 4,\n        pageStartIndex: 1,\n        withFirstAndLast: true,\n        firstPageText: \"First\",\n        prePageText: \"Back\",\n        nextPageText: \"Next\",\n        lastPageText: \"Last\",\n        nextPageTitle: \"First page\",\n        prePageTitle: \"Pre page\",\n        firstPageTitle: \"Next page\",\n        lastPageTitle: \"Last page\",\n        showTotal: true,\n        paginationTotalRenderer: customTotal,\n        sizePerPageList: [\n          {\n            text: \"5\",\n            value: 5\n          },\n          {\n            text: \"10\",\n            value: 10\n          },\n          {\n            text: \"All\",\n            value: this.state.products.length\n          }\n        ]\n      };\n      return (\n        <div>\n          <button onClick={this.delete} disabled={!this.state.selected.length}>\n            Delete\n          </button>\n          {/* <button onClick={this.download}>Download data</button> */}\n          <BootstrapTable\n            bootstrap4\n            keyField=\"primaryid\"\n            data={this.state.products}\n            caption={<CaptionElement />}\n            columns={columns}\n            cellEdit={cellEditFactory({ mode: \"click\", blurToSave: true })}\n            filter={filterFactory()}\n            pagination={paginationFactory(options)}\n            selectRow={selectRow}\n            striped\n            hover\n            condensed\n            noDataIndication=\"Table is Empty\"\n            defaultSorted={defaultSorted}\n          />\n        </div>\n      );\n    }\n  }\n}\n\nexport default Dashboard;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport \"./index.css\";\nimport Dashboard from \"./Dashboard\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Dashboard />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}